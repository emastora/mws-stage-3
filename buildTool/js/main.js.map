{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","document","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","event","updateRestaurants","map","google","maps","Map","zoom","center","lng","initMap","scrollwheel","nSelect","cIndex","cSelect","selectedIndex","nIndex","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","image","setAttribute","name","addMarkersToMap","li","className","src","imageUrlForRestaurant","more","mapMarkerForRestaurant","urlForRestaurant","location","href","marker","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    updateRestaurants();\r\n});\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute('alt', 'Photo of' + restaurant.name + ' restaurant');\r\n    li.append(image);\r\n\r\n    const name = document.createElement('h2');\r\n    name.innerHTML = restaurant.name;\r\n    li.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    li.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    li.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    li.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"]}