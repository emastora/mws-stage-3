{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","document","addEventListener","event","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","map","google","maps","Map","zoom","center","lat","lng","initMap","scrollwheel","cSelect","updateRestaurants","cIndex","selectedIndex","nIndex","nSelect","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","image","setAttribute","name","addMarkersToMap","li","className","src","imageUrlForRestaurant","more","mapMarkerForRestaurant","urlForRestaurant","location","href","marker","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute('alt', 'Photo of' + restaurant.name + ' restaurant');\r\n    li.append(image);\r\n\r\n    const name = document.createElement('h2');\r\n    name.innerHTML = restaurant.name;\r\n    li.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    li.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    li.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    li.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"]}