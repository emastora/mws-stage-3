{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL2","error","console","maps","Map","document","getElementById","zoom","self","scrollwheel","latlng","log","id","fetchRestaurantFromURL","reject","Promise","resolve","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","fetchReviewByRestaurant","then","reviews","fillReviewsHTML","fillFavouritesHTML","id2","arguments","length","undefined","innerHTML","name","address","image","className","cuisine_type","operating_hours","cuisine","fillRestaurantHoursHTML","operatingHours","hours","key","row","createElement","appendChild","day","time","container","title","noReviews","ul","createReviewHTML","review","li","date","Date","updatedAt","toLocaleDateString","rating","comments","breadcrumb","url","replace","results","exec","submitReview","decodeURIComponent","formEl","formElID","value","parseInt","i","fieldName","reset","sendReview","favButton","classList","toggle","pressed","labelText","getAttribute","sendFavourite","is_favorite","remove","setAttribute","fillBreadcrumb","addEventListener","ev","preventDefault","form"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL2((error, restaurant) => {\r\n        if (error) {\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            console.log(restaurant.latlng),\r\n                console.log(restaurant.id)\r\n                // fillBreadcrumb();\r\n                // DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (self.restaurant) { // restaurant already fetched!\r\n            return resolve(self.restaurant)\r\n        }\r\n        const id = getParameterByName('id');\r\n        if (!id) { // no id found in URL\r\n            const error = 'No restaurant id in URL'\r\n            return reject(error);\r\n        } else {\r\n            DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n                self.restaurant = restaurant;\r\n                if (!restaurant) {\r\n                    return reject(error);\r\n                }\r\n                fillRestaurantHTML();\r\n                DBHelper.fetchReviewByRestaurant(restaurant.id)\r\n                    .then((reviews) => {\r\n                        fillReviewsHTML(reviews);\r\n                        fillFavouritesHTML(restaurant.is_favorite);\r\n                        return resolve(self.restaurant);\r\n                    }).catch(err => {\r\n                        return reject(err);\r\n                    })\r\n                    //return resolve(self.restaurant);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL2 = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (self.restaurant) { // restaurant already fetched!\r\n            return resolve(self.restaurant)\r\n        }\r\n        const id2 = getParameterByName('id');\r\n        console.log(id2);\r\n        // return id;\r\n        if (!id2) { // no id found in URL\r\n            const error = 'No restaurant id in URL'\r\n            return reject(error);\r\n        } else {\r\n            DBHelper.fetchRestaurantById(id2, (error, restaurant) => {\r\n                self.restaurant = restaurant;\r\n                if (!restaurant) {\r\n                    return reject(error);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute('alt', 'Photo of the ' + restaurant.name + ' restaurant');\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    // fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Remove all reviews HTML.\r\n */\r\nconst resetReviewsHTML = () => {\r\n    const container = document.getElementById('reviews-container');\r\n    container.innerHTML = \"\";\r\n    const ul = document.createElement('ul');\r\n    ul.id = 'reviews-list';\r\n    container.appendChild(ul);\r\n}\r\n\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = new Date(review.updatedAt).toLocaleDateString();\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n/**\r\n * Catch the restaurant review form action.\r\n */\r\nconst submitReview = () => {\r\n    let review = {};\r\n    let formEl = document.getElementById('post-review-form');\r\n    let formElID = document.getElementById('restaurant_id');\r\n    formElID.value = parseInt(getParameterByName('id'));\r\n    formEl.appendChild(formElID);\r\n    for (let i = 0; i < formEl.length; ++i) {\r\n        let fieldName = formEl[i].name;\r\n        let value = formEl[i].value;\r\n        if (fieldName === \"\" || value === \"\") continue;\r\n        if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\r\n            value = parseInt(value);\r\n        }\r\n        review[formEl[i].name] = value;\r\n    }\r\n    formEl.reset();\r\n    DBHelper.sendReview(review);\r\n}\r\n\r\n/**\r\n * Manage Favorite button\r\n */\r\nconst favoriteToggle = () => {\r\n    let favButton = document.getElementById('is_fav');\r\n    favButton.classList.toggle('is_favorite');\r\n\r\n    let buttonState = favButton.getAttribute('aria-pressed');\r\n    let pressed = 'false';\r\n    let labelText = 'Like!';\r\n\r\n    if (buttonState === 'true') {\r\n        pressed = 'false';\r\n        labelText = 'Like!';\r\n    } else {\r\n        pressed = 'true';\r\n        labelText = 'Remove Like!';\r\n    }\r\n\r\n    favButton.setAttribute('aria-pressed', pressed);\r\n    favButton.setAttribute('aria-label', labelText);\r\n    favButton.innerHTML = labelText;\r\n\r\n    const id = getParameterByName('id');\r\n    DBHelper.sendFavourite(id, pressed);\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillFavouritesHTML = (is_favorite) => {\r\n    let favButton = document.getElementById('is_fav');\r\n    let pressed = '';\r\n    let labelText = '';\r\n\r\n    if (is_favorite === 'true' || is_favorite === true) {\r\n        pressed = 'true';\r\n        labelText = 'Remove Like!';\r\n        favButton.classList.add('is_favorite');\r\n    } else {\r\n        pressed = 'false';\r\n        labelText = 'Like!';\r\n        favButton.classList.remove('is_favorite');\r\n    }\r\n\r\n    favButton.setAttribute('aria-pressed', pressed);\r\n    favButton.setAttribute('aria-label', labelText);\r\n    favButton.innerHTML = labelText;\r\n}\r\n\r\n/**\r\n * Init\r\n */\r\n(() => {\r\n    fetchRestaurantFromURL()\r\n        .then((restaurant) => {\r\n            fillBreadcrumb();\r\n            let form = document.getElementById('post-review-form');\r\n            form.addEventListener('submit', function(ev) {\r\n                ev.preventDefault();\r\n                submitReview();\r\n            })\r\n            document.addEventListener(\"update_reviews_list\", ev => {\r\n                resetReviewsHTML()\r\n                DBHelper.fetchReviewByRestaurant(restaurant.id)\r\n                    .then((reviews) => {\r\n                        fillReviewsHTML(reviews);\r\n                        return resolve(self.restaurant);\r\n                    })\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.error('Init Error: ', err);\r\n        });\r\n})();"]}