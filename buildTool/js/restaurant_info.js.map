{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","console","maps","Map","document","getElementById","zoom","self","scrollwheel","DBHelper","mapMarkerForRestaurant","Promise","resolve","reject","id","getParameterByName","fetchRestaurantById","then","fillReviewsHTML","reviews","fillRestaurantHTML","fetchReviewByRestaurant","fillFavouritesHTML","arguments","length","undefined","name","image","address","innerHTML","setAttribute","src","imageUrlForRestaurant","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","hours","key","row","createElement","day","time","appendChild","container","title","noReviews","forEach","review","ul","createReviewHTML","li","date","rating","comments","fillBreadcrumb","breadcrumb","results","RegExp","exec","url","location","href","replace","submitReview","decodeURIComponent","formEl","formElID","value","parseInt","i","fieldName","reset","favButton","classList","toggle","pressed","favoriteToggle","getAttribute","buttonState","labelText","sendFavourite","is_favorite","add","remove","log","addEventListener","ev","preventDefault","form","catch","err"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) {\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (self.restaurant) { // restaurant already fetched!\r\n            return resolve(self.restaurant)\r\n        }\r\n        const id = getParameterByName('id');\r\n        if (!id) { // no id found in URL\r\n            const error = 'No restaurant id in URL'\r\n            return reject(error);\r\n        } else {\r\n            DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n                self.restaurant = restaurant;\r\n                if (!restaurant) {\r\n                    return reject(error);\r\n                }\r\n                fillRestaurantHTML();\r\n                DBHelper.fetchReviewByRestaurant(restaurant.id)\r\n                    .then((reviews) => {\r\n                        fillReviewsHTML(reviews);\r\n                        fillFavouritesHTML(restaurant.is_favorite);\r\n                        return resolve(self.restaurant);\r\n                    }).catch(err => {\r\n                        return reject(err);\r\n                    })\r\n                    //return resolve(self.restaurant);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute('alt', 'Photo of the ' + restaurant.name + ' restaurant');\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Remove all reviews HTML.\r\n */\r\nconst resetReviewsHTML = () => {\r\n    const container = document.getElementById('reviews-container');\r\n    container.innerHTML = \"\";\r\n    const ul = document.createElement('ul');\r\n    ul.id = 'reviews-list';\r\n    container.appendChild(ul);\r\n}\r\n\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = review.date;\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n/**\r\n * Catch the restaurant review form action.\r\n */\r\nconst submitReview = () => {\r\n    let review = {};\r\n    let formEl = document.getElementById('post-review-form');\r\n    let formElID = document.getElementById('restaurant_id');\r\n    formElID.value = parseInt(getParameterByName('id'));\r\n    formEl.appendChild(formElID);\r\n    for (let i = 0; i < formEl.length; ++i) {\r\n        let fieldName = formEl[i].name;\r\n        let value = formEl[i].value;\r\n        if (fieldName === \"\" || value === \"\") continue;\r\n        if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\r\n            value = parseInt(value);\r\n        }\r\n        review[formEl[i].name] = value;\r\n    }\r\n    formEl.reset();\r\n    DBHelper.sendReview(review);\r\n}\r\n\r\n/**\r\n * Manage Favorite button\r\n */\r\nconst favoriteToggle = () => {\r\n    let favButton = document.getElementById('is_fav');\r\n    favButton.classList.toggle('is_favorite');\r\n\r\n    let buttonState = favButton.getAttribute('aria-pressed');\r\n    let pressed = 'false';\r\n    let labelText = 'Like!';\r\n\r\n    if (buttonState === 'true') {\r\n        pressed = 'false';\r\n        labelText = 'Like!';\r\n    } else {\r\n        pressed = 'true';\r\n        labelText = 'Remove Like!';\r\n    }\r\n\r\n    favButton.setAttribute('aria-pressed', pressed);\r\n    favButton.setAttribute('aria-label', labelText);\r\n    favButton.innerHTML = labelText;\r\n\r\n    const id = getParameterByName('id');\r\n    DBHelper.sendFavourite(id, pressed);\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillFavouritesHTML = (is_favorite) => {\r\n    let favButton = document.getElementById('is_fav');\r\n    let pressed = '';\r\n    let labelText = '';\r\n\r\n    if (is_favorite === 'true' || is_favorite === true) {\r\n        pressed = 'true';\r\n        labelText = 'Remove Like!';\r\n        favButton.classList.add('is_favorite');\r\n    } else {\r\n        pressed = 'false';\r\n        labelText = 'Like!';\r\n        favButton.classList.remove('is_favorite');\r\n    }\r\n\r\n    favButton.setAttribute('aria-pressed', pressed);\r\n    favButton.setAttribute('aria-label', labelText);\r\n    favButton.innerHTML = labelText;\r\n}\r\n\r\n/**\r\n * Init\r\n */\r\n(() => {\r\n    console.log('rentaurant Init')\r\n    fetchRestaurantFromURL()\r\n        .then((restaurant) => {\r\n            fillBreadcrumb();\r\n            let form = document.getElementById('post-review-form');\r\n            form.addEventListener('submit', function(ev) {\r\n                ev.preventDefault();\r\n                submitReview();\r\n            })\r\n            document.addEventListener(\"update_reviews_list\", ev => {\r\n                resetReviewsHTML()\r\n                DBHelper.fetchReviewByRestaurant(restaurant.id)\r\n                    .then((reviews) => {\r\n                        fillReviewsHTML(reviews);\r\n                        return resolve(self.restaurant);\r\n                    })\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.error('Init Error: ', err);\r\n        });\r\n})();"]}