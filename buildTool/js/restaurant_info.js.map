{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","image","setAttribute","cuisine_type","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","fillReviewsHTML","key","row","createElement","day","time","hours","appendChild","reviews","container","title","noReviews","createReviewHTML","review","ul","forEach","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","replace","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute('alt', 'Photo of the ' + restaurant.name + ' restaurant');\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = review.date;\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}"]}