{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","Promise","resolve","reject","id","DBHelper","fetchRestaurantById","fillRestaurantHTML","fillReviewsHTML","reviews","fillFavouritesHTML","is_favorite","fetchReviewByRestaurant","arguments","length","undefined","innerHTML","name","address","image","className","cuisine_type","operating_hours","cuisine","fillRestaurantHoursHTML","operatingHours","hours","key","row","createElement","appendChild","day","time","container","title","noReviews","ul","createReviewHTML","review","li","date","rating","comments","breadcrumb","getParameterByName","url","replace","results","exec","submitReview","decodeURIComponent","formEl","formElID","value","parseInt","i","fieldName","reset","sendReview","favButton","classList","toggle","pressed","labelText","getAttribute","sendFavourite","remove","setAttribute","then","fillBreadcrumb","addEventListener","ev","preventDefault","form"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (self.restaurant) { // restaurant already fetched!\r\n            return resolve(self.restaurant)\r\n        }\r\n        const id = getParameterByName('id');\r\n        if (!id) { // no id found in URL\r\n            const error = 'No restaurant id in URL'\r\n            return reject(error);\r\n        } else {\r\n            DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n                self.restaurant = restaurant;\r\n                if (!restaurant) {\r\n                    return reject(error);\r\n                }\r\n                fillRestaurantHTML();\r\n                DBHelper.fetchReviewByRestaurant(restaurant.id)\r\n                    .then((reviews) => {\r\n                        fillReviewsHTML(reviews);\r\n                        fillFavouritesHTML(restaurant.is_favorite);\r\n                        return resolve(self.restaurant);\r\n                    }).catch(err => {\r\n                        return reject(err);\r\n                    })\r\n                    //return resolve(self.restaurant);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute('alt', 'Photo of the ' + restaurant.name + ' restaurant');\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Remove all reviews HTML.\r\n */\r\nconst resetReviewsHTML = () => {\r\n    const container = document.getElementById('reviews-container');\r\n    container.innerHTML = \"\";\r\n    const ul = document.createElement('ul');\r\n    ul.id = 'reviews-list';\r\n    container.appendChild(ul);\r\n}\r\n\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = review.date;\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n/**\r\n * Catch the restaurant review form action.\r\n */\r\nconst submitReview = () => {\r\n    let review = {};\r\n    let formEl = document.getElementById('post-review-form');\r\n    let formElID = document.getElementById('restaurant_id');\r\n    formElID.value = parseInt(getParameterByName('id'));\r\n    formEl.appendChild(formElID);\r\n    for (let i = 0; i < formEl.length; ++i) {\r\n        let fieldName = formEl[i].name;\r\n        let value = formEl[i].value;\r\n        if (fieldName === \"\" || value === \"\") continue;\r\n        if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\r\n            value = parseInt(value);\r\n        }\r\n        review[formEl[i].name] = value;\r\n    }\r\n    formEl.reset();\r\n    DBHelper.sendReview(review);\r\n}\r\n\r\n/**\r\n * Manage Favorite button\r\n */\r\nconst favoriteToggle = () => {\r\n    let favButton = document.getElementById('is_fav');\r\n    favButton.classList.toggle('is_favorite');\r\n\r\n    let buttonState = favButton.getAttribute('aria-pressed');\r\n    let pressed = 'false';\r\n    let labelText = 'Mark as favourite';\r\n\r\n    if (buttonState === 'true') {\r\n        pressed = 'false';\r\n        labelText = 'Mark as favourite';\r\n    } else {\r\n        pressed = 'true';\r\n        labelText = 'Remove favourite';\r\n    }\r\n\r\n    favButton.setAttribute('aria-pressed', pressed);\r\n    favButton.setAttribute('aria-label', labelText);\r\n    favButton.innerHTML = labelText;\r\n\r\n    const id = getParameterByName('id');\r\n    DBHelper.sendFavourite(id, pressed);\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillFavouritesHTML = (is_favorite) => {\r\n    let favButton = document.getElementById('is_fav');\r\n    let pressed = '';\r\n    let labelText = '';\r\n\r\n    if (is_favorite === 'true' || is_favorite === true) {\r\n        pressed = 'true';\r\n        labelText = 'Remove favourite';\r\n        favButton.classList.add('is_favorite');\r\n    } else {\r\n        pressed = 'false';\r\n        labelText = 'Mark as favourite';\r\n        favButton.classList.remove('is_favorite');\r\n    }\r\n\r\n    favButton.setAttribute('aria-pressed', pressed);\r\n    favButton.setAttribute('aria-label', labelText);\r\n    favButton.innerHTML = labelText;\r\n}\r\n\r\n/**\r\n * Init\r\n */\r\n(() => {\r\n    console.log('rentaurant Init')\r\n    fetchRestaurantFromURL()\r\n        .then((restaurant) => {\r\n            fillBreadcrumb();\r\n            let form = document.getElementById('post-review-form');\r\n            form.addEventListener('submit', function(ev) {\r\n                ev.preventDefault();\r\n                submitReview();\r\n            })\r\n            document.addEventListener(\"update_reviews_list\", ev => {\r\n                resetReviewsHTML()\r\n                DBHelper.fetchReviewByRestaurant(restaurant.id)\r\n                    .then((reviews) => {\r\n                        fillReviewsHTML(reviews);\r\n                        return resolve(self.restaurant);\r\n                    })\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.error('Init Error: ', err);\r\n        });\r\n})();"]}